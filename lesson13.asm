						;Всё, что следует за значком ";" - это комментарий.

.286						;Разрешает ассемблирование   непривилегированных   инструкций
       						;процессора 80286  (реальный  режим) и инструкций арифметического
       						;сопроцессора 80287.

CSEG segment    				;Даём имя сегменту, а точнее определяем абсолютный 
						;сегмент в памяти программ по определённому адресу.
						;Имя нашего сегмента будет CSEG.

assume cs:CSEG, ds:CSEG, es:CSEG, ss:CSEG       ;Задаём сегментные регистры, которые будем использовать для
       						;вычисления действующего адреса для всех меток и переменных, опре-
       						;делённых  для  сегмента  или группы сегментов с указанным именем.

org 100h                                        ;Программа типа .com

begin:						;Метка начала программы.


jmp Nerezident					;Прыгаем сразу за кодом резидента - продолжаем программу.

Rezident proc					;Начало нашей подпрограммы, которая останется в памяти.

pushf						;Сохраняем все флаги в стеке. Это нужно для того,
						;чтобы не нарушить работу программы. В частности,
						;следующие 2 строчки значение одного флага изменят (je).

cmp ah,9 					;Проверяем: это функция 09h?  
je metka                                        ;Если да, то переходим на метку

popf 						;Если нет, восстановим регистр флагов и
jmp dword ptr cs:[Peremennaja_21h] 		;перейдём на оригинальный обработчик прерывания 21h. 
						;А именно он находится в сегменте cs по адресу,
						;содержащемуся в регистре (см.квадратные скобки).

metka:

push ds 					;Сохраним регистр ds.
push dx                                         ;Сохраним регистр dx.
                    
push cs                                         ;Сохраним регистр cs.
pop ds                                          ;"Вытолкнем" последнее значение cs в ds. 

mov dx,offset Goodbye_world                     ;Занесём в dx адрес смещения нашей строки.

pushf 						;Сохраним значение всех флагов в стеке.
call dword ptr cs:[Variable_21h] 		;Вывели нашу строку вместо той, которую надо было.

pop dx 						;Восстановим регистр dx из стека.
pop ds                                          ;Восстановим регистр ds из стека.

popf                                            ;Восстановим флаги.

iret 						;Выйдем из прерывания и продолжим работу.

Variable_21h dd ? 				;Определяем переменную для хранения оригинального адреса 
						;обработчика 21h.

Goodbye_world db 'Goodbye, world!$'             ;Определяем переменную Goodbye_world, доступную побайтно, с фразой
                                                ;"Goodbye, world". В одинарных кавычках, после знака "!" ставим
						;знак "$".

Rezident endp                                   ;Конец подпрограммы.

Nerezident:                                     ;Здесь закончился резидент.

mov ah,35h 					;AH содержит номер функции 35h - получение адреса прерывания.
mov al,21h 					;AL указывает номер прерывания, которое перехватываем.

int 21h 					;Выполняем функцию.
						;в ES:BX получаем адрес 21h прерывания (ES - сегмент, BX - смещение).

mov word ptr Variable_21h,bx                 ;Загружаем в Peremennaja_21h слово (2 байта) из BX,
						;где находится смещение.

mov word ptr Variable_21h+2,es 		;А следующим словом - из ES (смещение).

mov ax,2521h                                    ;Перехватываем прерывание.

mov dx,offset Rezident 				;DX должен указывать на наш обработчик (смотри HELP.EXE).

int 21h                                         ;Осуществляем прерывание. Мы не вызываем резидент командой
						;call Rezident, а используем эти три строчки, начиная с mov ax,2521h

mov dx,offset Nerezident                        ;Оставляем  программу резидентной: в dx - смещение по адресу 
						;метки Nerezident - указываем последний байт, остающийся в памяти.
int 27h                                         ;Осуществляем прерывание и выходим в DOS (но оставляем резидента).

CSEG ends
end begin