						;Всё, что следует за значком ";" - это комментарий.

.286						;Разрешает ассемблирование   непривилегированных   инструкций
       						;процессора 80286  (реальный  режим) и инструкций арифметического
       						;сопроцессора 80287.

CSEG segment    				;Даём имя сегменту, а точнее определяем абсолютный 
						;сегмент в памяти программ по определённому адресу.
						;Имя нашего сегмента будет CSEG.

assume cs:CSEG, ds:CSEG, es:CSEG, ss:CSEG       ;Задаём сегментные регистры, которые будем использовать для
       						;вычисления действующего адреса для всех меток и переменных, опре-
       						;делённых  для  сегмента  или группы сегментов с указанным именем.
						;У нас их четыре, - CS, DS, ES, SS и они будут указывать на наш 
						;единственный сегмент (мы его назвали CSEG). 

org 100h 					;Устанавливаем счётчик инструкций в текущем сегменте в  соот-
       						;ветствии с адресом, задаваемым "выражением".
						;Сейчас этот счётчик равен 100h - используется для всех программ 
						;типа .com

begin:						;Метка начала программы.

mov ah,1Ah                                      ;Установим PSP в конец файла.
mov dx,offset Finish
int 21h

call Find_first					;Ищем первый файл.
jc Error_file_label				;Нет txt-файлов - на выход.

goto_cycle:					;Начало цикла.
                                                
mov ax,3D02h					;Загружаем в регистр ah число 3Dh (функция открытия
						;файла с записью), а в al число 02h (пишем в конец).
						;Можно было записать и так - mov ah,3Dh
						;mov al,02h

mov dx,offset Finish                            ;Указываем адрес файла в DTA (по умолчанию он 80h от начала PSP,
add dx,1Eh                                      ;+1Eh - наше имя файла.
int 21h						;Выполняем функцию.

mov Handle,ax					;При открытии файлу будет присвоен номер, его и
						;сохраняем для дальнейших действий,
mov bx,ax					;а заодно и сохраняем его в bx.

mov ah,3Fh 					;Читаем файл
mov cx,1024                                     ;с длиной 1Кб.
mov dx,offset Finish
add dx,100h                                     ;DX устанавливаем за PSP.
int 21h						;Выполняем функцию.

push ax						;Запомним длину файла в стек.

mov dx,offset Finish					
add dx,100h
add dx,ax                                       ;В ax-число действительно прочитанных байт.

mov si,offset one				;Устанавливаем si на символ, который мы будем добавлять.
mov di,dx					;Устанавливаем di туда, куда мы будем осуществлять перенос.
mov cx,1					;Переносим 1 байт.
rep movsb					;Переносим!

mov ax,4200h					;Используем функцию установки указателя.
						;al=00h - устанавливаем в начало.
mov cx,0                                        ;Нам надо записать прямо в начало файла, поэтому
mov dx,0                                        ;обнулим cx и dx (иначе будет писать далее на
                                                ;значение (CX * 65536) + DX
int 21h						;Выполняем функцию.

mov ah,40h					;Используем функцию записи в файл.
mov dx,offset Finish
add dx,100h					;В dx - адрес начала считанного файла.
pop cx						;Число записываемых байт.
inc cx						;На один больше.
int 21h                                         ;Выполняем функцию.

mov ah,3Eh                                      ;Используем функцию закрытия файла.
mov bx,Handle                                   ;Для закрытия обязательно "вспоминаем" его номер,
						;номер у нас был сохранён в Handle.
int 21h                                         ;Выполняем функцию.

call Find_next					;Ищем следующий файл.
jnc goto_cycle					;Нашли ещё один файл; прыгаем на метку.

mov ah,9					;Загружаем в регистр ah число 9 (указываем функцию).
mov dx,offset Vse_ok				;Указываем, что за фразу мы будем выводить.
int 21h 					;Выводим фразу.

mov ah,4Ch					;Используем для выхода из программы.
int 21h

Error_file_label:				;Вывод сообщения об ошибке.

mov ah,9					;Загружаем в регистр ah число 9 (указываем функцию).
mov dx,offset Error_file			;Указываем, что за фразу мы будем выводить.
int 21h 					;Выводим фразу.

mov ah,4Ch					;Используем для выхода из программы.
int 21h

Find_first proc                                 ;Подпрограмма поиска первого файла.
mov ah,4Eh					;Ищем первый файл по маске (функция 4Eh).
xor cx,cx					;Атрибуты обычные. Смотрим, что в CX.
mov dx,offset File_name 			;Адрес маски в DS:DX
int 21h						;В DTA заносится имя найденного файла.
ret
Find_first endp
                                                ;Подпрограмма поиска следующего файла.
Find_next proc
mov dx,offset Finish				;DS:DX указывают на DTA.
xor cx,cx	                                ;CX=0.
mov ah,4Fh    		                        ;4Fh - поиск следующего файла.
int 21h                                         ;В DTA заносится имя найденного файла.
ret
Find_next endp
         
File_name db '*.txt',0				;Маска файла.

Handle dw 0FFFFh				;Определяем переменную Handle, которую используем для
						;хранения номера файла. По умолчанию она равна 0FFFFh.

one db '1'					;Определяем переменную one, содержащую символ "1",
						;которую мы будем приписывать в конец файла.
Vse_ok db 'Файлы найдены и обновлены. Всем спасибо.$'

Error_file db 'Файлы не найдены. Поместите файлы *.txt в каталог с программой.$'

Finish equ $                                    ;Метка конца программы.

CSEG ends
end begin